load("/home/ridley/Documents/GitHub/AppliedStatisticsProject2022/scripts/basketmarket/lastnight.RData")
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "D.2")
getwd()
setwd("~/Documents/GitHub/AppliedStatisticsProject2022/scripts/basketmarket")
mutations <- as.data.frame(matrix(nrow=0,ncol=1))
dfCovidLineage <- subset(dfcovid, dfcovid$pango_lineage == "D.2")
mutations <- as.data.frame(matrix(nrow=0,ncol=1))
mutations <- fetch_mutations(dfCovidLineage, mutations)
frequencies <- mutation_frequencies(dfCovidLineage, mutations)
relevant_mutations <- filter05percent(frequencies, numberOfSamples)
binmatrix <- build_matrix(dfCovidLineage, relevant_mutations)
filename <- tolower(currentLineage)
dir.create(toupper(filename))
dirname <- toupper(filename)
filename <- gsub('\\.','',filename)
filename <- paste(filename,".csv",sep="")
filename <- "D.2"
dir.create(toupper(filename))
dirname <- toupper(filename)
filename <- gsub('\\.','',filename)
filename <- paste(filename,".csv",sep="")
write.csv(data.frame(frequencies), file = paste(dirname,"/frequencies_", filename, sep=""),row.names=FALSE)
write.csv(data.frame(binmatrix), file = paste(dirname,"/binmatrix_", filename, sep=""),row.names=FALSE)
library(readr)
binmatrix_D2 <- read_csv("D.2/binmatrix_D2.csv")
View(binmatrix_D2)
library(readr)
frequencies_D2 <- read_csv("D.2/frequencies_D2.csv")
View(frequencies_D2)
filter1to90percent <- function(frequencies, totalsamples) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] > 0.01 & frequencies[,3] < 0.9)
frequencies <- frequencies[,-3]
frequencies <- as.data.frame(frequencies)
frequencies[,1] <- gsub("\\:", "\\.", frequencies[,1])
return(frequencies)
}
View(frequencies)
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "D.2")
freq_for_rules <- filter5to90percent(frequencies, nrow(dfLineage))
attach(freq_for_rules)
freq_for_rules <- freq_for_rules[order(-t.freq.),]
detach(freq_for_rules)
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "D.2")
freq_for_rules <- filter5to90percent(frequencies, nrow(dfLineage))
attach(freq_for_rules)
freq_for_rules <- freq_for_rules[order(-t.freq.),]
View(freq_for_rules)
View(freq_for_rules)
View(freq_for_rules)
View(frequencies)
filter1to90percent <- function(frequencies, totalsamples) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] > 0.005 & frequencies[,3] < 0.9)
frequencies <- frequencies[,-3]
frequencies <- as.data.frame(frequencies)
frequencies[,1] <- gsub("\\:", "\\.", frequencies[,1])
return(frequencies)
}
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "D.2")
freq_for_rules <- filter5to90percent(frequencies, nrow(dfLineage))
View(freq_for_rules)
filter1to90percent <- function(frequencies, totalsamples) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] > 0.001 & frequencies[,3] < 0.9)
frequencies <- frequencies[,-3]
frequencies <- as.data.frame(frequencies)
frequencies[,1] <- gsub("\\:", "\\.", frequencies[,1])
return(frequencies)
}
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "D.2")
freq_for_rules <- filter5to90percent(frequencies, nrow(dfLineage))
filter1to90percent <- function(frequencies, totalsamples) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] > 0.0001 & frequencies[,3] < 0.9)
frequencies <- frequencies[,-3]
frequencies <- as.data.frame(frequencies)
frequencies[,1] <- gsub("\\:", "\\.", frequencies[,1])
return(frequencies)
}
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "D.2")
freq_for_rules <- filter5to90percent(frequencies, nrow(dfLineage))
freq_for_rules <- filter5to90percent(frequencies, nrow(dfLineage))
filter1to90percent <- function(frequencies, totalsamples) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] < 0.9)
frequencies <- frequencies[,-3]
frequencies <- as.data.frame(frequencies)
frequencies[,1] <- gsub("\\:", "\\.", frequencies[,1])
return(frequencies)
}
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "D.2")
freq_for_rules <- filter5to90percent(frequencies, nrow(dfLineage))
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "D.2")
freq_for_rules <- filter5to90percent(frequencies, nrow(dfLineage))
filter5to90percent <- function(frequencies, totalsamples) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] > 0.001 & frequencies[,3] < 0.9)
frequencies <- frequencies[,-3]
frequencies <- as.data.frame(frequencies)
frequencies[,1] <- gsub("\\:", "\\.", frequencies[,1])
return(frequencies)
}
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "D.2")
freq_for_rules <- filter5to90percent(frequencies, nrow(dfLineage))
filter5to90percent <- function(frequencies, totalsamples) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] > 0.01 & frequencies[,3] < 0.9)
frequencies <- frequencies[,-3]
frequencies <- as.data.frame(frequencies)
frequencies[,1] <- gsub("\\:", "\\.", frequencies[,1])
return(frequencies)
}
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "D.2")
freq_for_rules <- filter5to90percent(frequencies, nrow(dfLineage))
View(freq_for_rules)
attach(freq_for_rules)
#freq_for_rules <- freq_for_rules[order(-t.freq),]
detach(freq_for_rules)
df_for_rules <- as.data.frame(matrix(nrow=0,ncol=ncol(binmatrix)))
mutationsToKeep <- as.data.frame(freq_for_rules[,1])
totalMutations <- as.data.frame(names(tempbin))
mutationsToDrop <- setdiff(t(totalMutations), t(mutationsToKeep))
tempbin <- binmatrix[,-1:-3]
mutationsToDrop <- as.character(mutationsToDrop)
tempbin <- tempbin[,!(names(tempbin) %in% mutationsToDrop)]
for(i in 1:nrow(binmatrix)) {
onerow <- tempbin[i,]
names <- colnames(onerow)
row <- vector(mode="character", length=ncol(onerow))
for(j in 1:ncol(onerow)) {
if(onerow[j] == 1)
row[j] = names[j]
else
row[j] = NA
}
row <- t(as.data.frame(row))
df_for_rules <- rbind(df_for_rules, row)
}
getwd()
write.table(df_for_rules,file="testing.csv",row.names = FALSE, col.names=FALSE, sep=",")
transactions <- read.transactions("testing.csv", sep=",", rm.duplicates=TRUE)
itemFrequencyPlot(transactions)
itemFrequencyPlot(transactions, las=1)
itemFrequencyPlot(transactions, las=2)
itemFrequencyPlot(transactions, las=3)
itemFrequencyPlot(transactions, las=2)
itemFrequencyPlot(transactions, las=3)
itemFrequencyPlot(transactions, las=2)
forPlot <- rev(tail(sort(itemFrequency(transactions)),40))
barplot(forPlot, las=2, cex.names=0.8)
X11()
forPlot <- rev(tail(sort(itemFrequency(transactions)),40))
barplot(forPlot, las=2, cex.names=0.8)
View(freq_for_rules)
View(df_for_rules)
orf1b_k709N_rules <- apriori(data = transactions, parameter =list(sup=0.01, conf=0.7, maxlen=4), appearance = list(rhs="ORF1b:K709N"))
length(orf1b_k709N_rules)
inspect(transactions)
trans1 <- as(transactions,"list")
trans1
orf1b_k709N_rules <- apriori(data = transactions, parameter =list(sup=0.01, conf=0.5, maxlen=4), appearance = list(rhs="ORF1b:K709N"))
orf1b_k709N_rules <- apriori(data = transactions, parameter =list(sup=0.01, conf=0.5), appearance = list(rhs="ORF1b:K709N"))
orf1b_k709N_rules <- apriori(data = transactions, parameter =list(sup=0.01, conf=0.1), appearance = list(rhs="ORF1b:K709N"))
orf1b_k709N_rules <- apriori(data = transactions, parameter =list(sup=0.01, conf=0.05), appearance = list(rhs="ORF1b:K709N"))
orf1b_k709N_rules <- apriori(data = transactions, parameter =list(sup=0.05, conf=0.05), appearance = list(rhs="ORF1b:K709N"))
plot(orf1b_k709N_rules)
library(arulesViz)
plot(orf1b_k709N_rules)
inspect(rules)
inspect(orf1b_k709N_rules)
inspect(orf1b_k709N_rules)
orf1b_k709N_rules <- apriori(data = transactions, parameter =list(sup=0.1, conf=0.7))
rules <- apriori(data = transactions, parameter =list(sup=0.05, conf=0.7))
rules <- apriori(data = transactions, parameter =list(sup=0.01, conf=0.7))
plot(rules)
inspect(rules)
inspect(head(rules))
filterXtoYpercent <- function(frequencies, totalsamples, x, y) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] > x & frequencies[,3] < y)
frequencies <- frequencies[,-3]
frequencies <- as.data.frame(frequencies)
frequencies[,1] <- gsub("\\:", "\\.", frequencies[,1])
return(frequencies)
}
remove(list = ls())
gc()
gc()
library(readr)
lineages_frequencies <- read_csv("~/Documents/GitHub/AppliedStatisticsProject2022/data/lineages_frequencies.csv")
View(lineages_frequencies)
library(readr)
frequencies <- read_csv("~/Documents/GitHub/AppliedStatisticsProject2022/data/lineages/AY.3/frequencies_ay3.csv")
View(frequencies)
library(readr)
binmatrix <- read_csv("~/Documents/GitHub/AppliedStatisticsProject2022/data/lineages/AY.3/binmatrix_ay3.csv")
View(binmatrix)
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "AY.3")
freq_for_rules <- filterXtoYpercent(frequencies, nrow(binmatrix), 0.05, 0.9)
filterXtoYpercent <- function(frequencies, totalsamples, x, y) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] > x & frequencies[,3] < y)
frequencies <- frequencies[,-3]
frequencies <- as.data.frame(frequencies)
frequencies[,1] <- gsub("\\:", "\\.", frequencies[,1])
return(frequencies)
}
dfLineage <- subset(dfcovid, dfcovid$pango_lineage == "AY.3")
freq_for_rules <- filterXtoYpercent(frequencies, nrow(binmatrix), 0.05, 0.9)
freq_for_rules <- filterXtoYpercent(frequencies, nrow(binmatrix), 0.005, 0.9)
View(freq_for_rules)
gc()
df_for_rules <- as.data.frame(matrix(nrow=0,ncol=ncol(binmatrix)))
mutationsToKeep <- as.data.frame(freq_for_rules[,1])
totalMutations <- as.data.frame(names(tempbin))
mutationsToKeep <- as.data.frame(freq_for_rules[,1])
totalMutations <- as.data.frame(names(tempbin))
tempbin <- binmatrix[,-1:-3]
totalMutations <- as.data.frame(names(tempbin))
mutationsToDrop <- setdiff(t(totalMutations), t(mutationsToKeep))
mutationsToDrop <- as.character(mutationsToDrop)
tempbin <- tempbin[,!(names(tempbin) %in% mutationsToDrop)]
for(i in 1:nrow(binmatrix)) {
onerow <- tempbin[i,]
names <- colnames(onerow)
row <- vector(mode="character", length=ncol(onerow))
for(j in 1:ncol(onerow)) {
if(onerow[j] == 1)
row[j] = names[j]
else
row[j] = NA
}
row <- t(as.data.frame(row))
df_for_rules <- rbind(df_for_rules, row)
}
View(df_for_rules)
for(i in 1:nrow(binmatrix)) {
onerow <- tempbin[i,]
names <- colnames(onerow)
row <- vector(mode="character", length=ncol(onerow))
for(j in 1:ncol(onerow)) {
if(onerow[j] == 1)
row[j] = names[j]
else
row[j] = NA
}
row <- t(as.data.frame(row))
df_for_rules <- rbind(df_for_rules, row)
}
View(df_for_rules)
test <- matrix(nrow=2,ncol=3)
test[1,2]
test
fetch_mutations <- function(covid_df, unique_mutations) {
# Assumes aaSubstitutions is the 9th column!
# According to our conventions in the metadata_animals.csv data set
# the 10th column refers to aaSubstitutions
aasequences <- as.data.frame(covid_df[,9])
#unique_mutations <- as.data.frame(matrix(nrow=0,ncol=1))
for(i in 1:nrow(aasequences)) {
# Must do an inner loop...
aamutations <- as.data.frame(strsplit(as.character(aasequences[i,1]), ","))
for(j in 1:nrow(aamutations)) {
#tuple <- as.data.frame(strsplit(as.character(aachanges[j,1]),":"))
mutation <- aamutations[j,1]
if(length(mutation) != 0) {
if(!(mutation %in% unique_mutations[,1])) {
unique_mutations <- rbind(unique_mutations, list(mutation))
}
}
}
}
return(unique_mutations)
}
# Build mutation frequencies, both in dataframe forms
# mutations as a single column dataframe
mutation_frequencies <- function(dfcovid, mutations) {
freq <-  as.data.frame(matrix(nrow=1,ncol=nrow(mutations)))
freq[1,] <- integer(nrow(mutations))
colnames(freq) <- mutations[,1]
aasequences <- as.data.frame(dfcovid[,9])
for(i in 1:nrow(aasequences)) {
aamutations <- as.data.frame(strsplit(as.character(aasequences[i,1]), ","))
for(j in 1:nrow(aamutations)) {
mutation_i <- match(aamutations[j,1], mutations[,1])
freq[1,mutation_i] <- freq[1,mutation_i] + 1
}
}
return(cbind(mutations,t(freq)))
}
filter05percent <- function(frequencies, totalsamples) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] > 0.005)
frequencies <- frequencies[,-3]
frequencies <- as.data.frame(frequencies)
frequencies[,1] <- gsub("\\.", ":", frequencies[,1])
return(frequencies)
}
build_matrix <- function(dfcovid, important_mutations) {
# Initial declaration of the matrix, empty matrix
finalmatrix <- as.data.frame(matrix(nrow=0, ncol = (3 + nrow(important_mutations))))
# Outer for that scans the dataframe one row at a time
for(i in 1:nrow(dfcovid)) {
# the "toadd" dataframe is a one row dataframe containing the row to be added to the matrix
# we fill it with the lineage, country, date + a number of columns equal to that of the
# relevant mutations
toadd <- as.data.frame(matrix(nrow=1, ncol = (3 + nrow(important_mutations))))
toadd[1,1] <- dfcovid[i,]$pango_lineage;
toadd[1,2] <- dfcovid[i,]$country
toadd[1,3] <- dfcovid[i,]$date
# We initialize the 4th column up to nrow(important_mutations) with zeroes, remember
# that these are binary variables!
toadd[1,4:ncol(toadd)] <- t(as.data.frame(integer(nrow(important_mutations))))
# The aaSubstitutions column is split by "," and converted into a dataframe to be scanned
# for example:
#   N:G204R,ORF1a:Q3966R,S:K1191N (one row)
#   becomes this:
#     - N:G204R
#     - ORF1a:Q3966R
#     - S:K1191N
aamutations <- as.data.frame(strsplit(as.character(dfcovid[i,9]), ","))
# Now we scan the mutations
for(j in 1:nrow(aamutations)) {
# We search for the index of the current mutation in the important_mutations row
# If we don't find it then it means that the mutations is not relevant and we don't consider it
# this also means that match() will return a NA (absence of a value)
mutation_i <- match(aamutations[j,1], important_mutations[,1])
if(!is.na(mutation_i)) {
# If we find the mutation then we mark it with a 1 (the mutation occurred in this sample)
toadd[1, 3 + mutation_i] <- 1
}
}
# We add the "toadd" row to the matrix (merging the two with rbind())
finalmatrix <- rbind(finalmatrix, toadd[1,])
}
# We rename the column names
colnames(finalmatrix) <- c("lineage", "country", "date", t(important_mutations[,1]))
return(finalmatrix)
}
fetch_mutations <- function(covid_df, unique_mutations) {
# Assumes aaSubstitutions is the 9th column!
# According to our conventions in the metadata_animals.csv data set
# the 10th column refers to aaSubstitutions
aasequences <- as.data.frame(covid_df[,9])
#unique_mutations <- as.data.frame(matrix(nrow=0,ncol=1))
for(i in 1:nrow(aasequences)) {
# Must do an inner loop...
aamutations <- as.data.frame(strsplit(as.character(aasequences[i,1]), ","))
for(j in 1:nrow(aamutations)) {
#tuple <- as.data.frame(strsplit(as.character(aachanges[j,1]),":"))
mutation <- aamutations[j,1]
if(length(mutation) != 0) {
if(!(mutation %in% unique_mutations[,1])) {
unique_mutations <- rbind(unique_mutations, list(mutation))
}
}
}
}
return(unique_mutations)
}
library(readr)
dfcovid <- read_csv("~/Documents/GitHub/AppliedStatisticsProject2022/data/metadata_humans_final_index.csv")
View(dfcovid)
getwd()
for(i in 94) {
currentLineage <- lineages_frequencies$lineages[i]
numberOfSamples <- lineages_frequencies$V2[i]
dfCovidLineage <- subset(dfcovid, dfcovid$pango_lineage == currentLineage)
mutations <- as.data.frame(matrix(nrow=0,ncol=1))
mutations <- fetch_mutations(dfCovidLineage, mutations)
frequencies <- mutation_frequencies(dfCovidLineage, mutations)
relevant_mutations <- filter05percent(frequencies, numberOfSamples)
binmatrix <- build_matrix(dfCovidLineage, relevant_mutations)
filename <- tolower(currentLineage)
dir.create(toupper(filename))
dirname <- toupper(filename)
filename <- gsub('\\.','',filename)
filename <- paste(filename,".csv",sep="")
write.csv(data.frame(frequencies), file = paste(dirname,"/frequencies_", filename, sep=""),row.names=FALSE)
write.csv(data.frame(binmatrix), file = paste(dirname,"/binmatrix_", filename, sep=""),row.names=FALSE)
remove(dfCovidLineage)
gc()
}
library(readr)
binmatrix <- read_csv("A.1/binmatrix_a1.csv")
View(binmatrix)
library(readr)
frequencies <- read_csv("A.1/frequencies_a1.csv")
View(frequencies)
# We already have the binary matrix and such
# For association rule mining we will filter the mutations that appear more than
# 90% of the time and those that appear less than 5% of the time.
library(plyr)
library(arules)
library(arulesViz)
filterXtoYpercent <- function(frequencies, totalsamples, x, y) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] > x & frequencies[,3] < y)
frequencies <- frequencies[,-3]
frequencies <- as.data.frame(frequencies)
frequencies[,1] <- gsub("\\:", "\\.", frequencies[,1])
return(frequencies)
}
freq_for_rules <- filterXtoYpercent(frequencies, nrow(binmatrix), 0.01, 0.9)
df_for_rules <- matrix(nrow=nrow(binmatrix),ncol=ncol(binmatrix))
mutationsToKeep <- as.data.frame(freq_for_rules[,1])
tempbin <- binmatrix[,-1:-3]
totalMutations <- as.data.frame(names(tempbin))
mutationsToDrop <- setdiff(t(totalMutations), t(mutationsToKeep))
mutationsToDrop <- as.character(mutationsToDrop)
tempbin <- tempbin[,!(names(tempbin) %in% mutationsToDrop)]
names <- colnames(tempbin)
for(i in 1:nrow(binmatrix)) {
for(j in 1:ncol(onerow)) {
if(tempbin[i,j] == 1)
df_for_rules[i,j] = names[j]
}
}
df_for_rules <- as.data.frame(df_for_rules)
View(binmatrix)
View(df_for_rules)
View(tempbin)
freq_for_rules <- filterXtoYpercent(frequencies, nrow(binmatrix), 0.01, 0.95)
attach(freq_for_rules)
#freq_for_rules <- freq_for_rules[order(-t.freq),]
detach(freq_for_rules)
df_for_rules <- matrix(nrow=nrow(binmatrix),ncol=ncol(binmatrix))
mutationsToKeep <- as.data.frame(freq_for_rules[,1])
tempbin <- binmatrix[,-1:-3]
totalMutations <- as.data.frame(names(tempbin))
mutationsToDrop <- setdiff(t(totalMutations), t(mutationsToKeep))
mutationsToDrop <- as.character(mutationsToDrop)
tempbin <- tempbin[,!(names(tempbin) %in% mutationsToDrop)]
names <- colnames(tempbin)
names
df_for_rules <- matrix(nrow=nrow(binmatrix),ncol=nrow(freq_for_rules))
df_for_rules <- matrix(nrow=nrow(binmatrix),ncol=nrow(freq_for_rules))
freq_for_rules <- filterXtoYpercent(frequencies, nrow(binmatrix), 0.01, 0.95)
attach(freq_for_rules)
#freq_for_rules <- freq_for_rules[order(-t.freq),]
detach(freq_for_rules)
mutationsToKeep <- as.data.frame(freq_for_rules[,1])
tempbin <- binmatrix[,-1:-3]
totalMutations <- as.data.frame(names(tempbin))
mutationsToDrop <- setdiff(t(totalMutations), t(mutationsToKeep))
mutationsToDrop <- as.character(mutationsToDrop)
tempbin <- tempbin[,!(names(tempbin) %in% mutationsToDrop)]
df_for_rules <- matrix(nrow=nrow(binmatrix),ncol=nrow(freq_for_rules))
names <- colnames(tempbin)
length(names)
for
for(i in 1:nrow(binmatrix)) {
for(j in 1:length(names)) {
if(tempbin[i,j] == 1)
df_for_rules[i,j] = names[j]
}
}
View(binmatrix)
df_for_rules <- as.data.frame(df_for_rules)
write.table(df_for_rules,file="testing.csv",row.names = FALSE, col.names=FALSE, sep=",")
transactions <- read.transactions("testing.csv", sep=",", rm.duplicates=TRUE)
itemFrequencyPlot(transactions)
rules <- apriori(transactions, parameter=list(supp = 0.4, conf = 0.7, maxlen = 3))
rules <- apriori(transactions, parameter=list(supp = 0.05, conf = 0.7))
rules <- apriori(transactions, parameter=list(supp = 0.01, conf = 0.4))
write.table(df_for_rules,file="testing.csv",row.names = FALSE, col.names=FALSE, sep=",")
transactions <- read.transactions("testing.csv", sep=",", rm.duplicates=TRUE)
itemFrequencyPlot(transactions)
rules <- apriori(transactions, parameter=list(supp = 0.01, conf = 0.5))
inspect(rules)
save.image("~/Documents/GitHub/AppliedStatisticsProject2022/scripts/basketmarket/lastnight.RData")
