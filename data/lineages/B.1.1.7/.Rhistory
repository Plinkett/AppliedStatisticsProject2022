setwd("~/Documents/GitHub/AppliedStatisticsProject2022/data/b117")
frequencies_question <- read.csv("totmutations_b117.csv")
View(frequencies_question)
frequencies_question <- t(frequencies_question)
dfcovid <- read.csv("/home/ridley/Documents/applied_stats_csv/metadata_humans_final_index.csv")
# Fetch all unique mutations in a certain dataset (to use with lineages or clades)
fetch_mutations <- function(covid_df, unique_mutations) {
# Assumes aaSubstitutions is the 9th column!
# According to our conventions in the metadata_animals.csv data set
# the 10th column refers to aaSubstitutions
aasequences <- as.data.frame(covid_df[,9])
#unique_mutations <- as.data.frame(matrix(nrow=0,ncol=1))
for(i in 1:nrow(aasequences)) {
# Must do an inner loop...
aamutations <- as.data.frame(strsplit(as.character(aasequences[i,1]), ","))
for(j in 1:nrow(aamutations)) {
#tuple <- as.data.frame(strsplit(as.character(aachanges[j,1]),":"))
mutation <- aamutations[j,1]
if(length(mutation) != 0) {
if(!(mutation %in% unique_mutations[,1])) {
unique_mutations <- rbind(unique_mutations, list(mutation))
}
}
}
}
return(unique_mutations)
}
# Build mutation frequencies, both in dataframe forms
# mutations as a single column dataframe
mutation_frequencies <- function(dfcovid, mutations) {
freq <-  as.data.frame(matrix(nrow=1,ncol=nrow(mutations)))
freq[1,] <- integer(nrow(mutations))
colnames(freq) <- mutations[,1]
aasequences <- as.data.frame(dfcovid[,9])
for(i in 1:nrow(aasequences)) {
aamutations <- as.data.frame(strsplit(as.character(aasequences[i,1]), ","))
for(j in 1:nrow(aamutations)) {
mutation_i <- match(aamutations[j,1], mutations[,1])
freq[1,mutation_i] <- freq[1,mutation_i] + 1
}
}
return(cbind(mutations,t(freq)))
}
# Function that filters the mutations that appear less than 5% of the time
filter5percent <- function(frequencies, totalsamples) {
frequencies[,3] <- frequencies[,2] / totalsamples
frequencies <- subset(frequencies, frequencies[,3] > 0.05)
frequencies <- frequencies[,-3]
return(as.data.frame(frequencies))
}
# Function that builds the binary matrix of mutations
# column names
# [lineage, country, date, mutation1, mutation2, ..., mutationN]
# Input:
#   dfcovid <- dataframe as presented in the original metadata_filtrato.csv dataset
#              (minus the "host" column, which is assumed to be "Homo sapiens").
#   important_mutations <- the set of mutations deemed relevant for our analysis, that is the mutations
#                          that appear less than 95% and more than 5% of the time.
build_matrix <- function(dfcovid, important_mutations) {
# Initial declaration of the matrix, empty matrix
finalmatrix <- as.data.frame(matrix(nrow=0, ncol = (3 + nrow(important_mutations))))
# Outer for that scans the dataframe one row at a time
for(i in 1:nrow(dfcovid)) {
# the "toadd" dataframe is a one row dataframe containing the row to be added to the matrix
# we fill it with the lineage, country, date + a number of columns equal to that of the
# relevant mutations
toadd <- as.data.frame(matrix(nrow=1, ncol = (3 + nrow(important_mutations))))
toadd[1,1] <- dfcovid[i,]$pango_lineage;
toadd[1,2] <- dfcovid[i,]$country
toadd[1,3] <- dfcovid[i,]$date
# We initialize the 4th column up to nrow(important_mutations) with zeroes, remember
# that these are binary variables!
toadd[1,4:ncol(toadd)] <- t(as.data.frame(integer(nrow(important_mutations))))
# The aaSubstitutions column is split by "," and converted into a dataframe to be scanned
# for example:
#   N:G204R,ORF1a:Q3966R,S:K1191N (one row)
#   becomes this:
#     - N:G204R
#     - ORF1a:Q3966R
#     - S:K1191N
aamutations <- as.data.frame(strsplit(as.character(dfcovid[i,9]), ","))
# Now we scan the mutations
for(j in 1:nrow(aamutations)) {
# We search for the index of the current mutation in the important_mutations row
# If we don't find it then it means that the mutations is not relevant and we don't consider it
# this also means that match() will return a NA (absence of a value)
mutation_i <- match(aamutations[j,1], important_mutations[,1])
if(!is.na(mutation_i)) {
# If we find the mutation then we mark it with a 1 (the mutation occurred in this sample)
toadd[1, 3 + mutation_i] <- 1
}
}
# We add the "toadd" row to the matrix (merging the two with rbind())
finalmatrix <- rbind(finalmatrix, toadd[1,])
}
# We rename the column names
colnames(finalmatrix) <- c("lineage", "country", "date", t(important_mutations[,1]))
return(finalmatrix)
}
df_b117 <- subset(dfcovid, dfcovid$pango_lineage == "B.1.1.7")
relevant_mutations <- filter5percent(frequencies_question, nrow(df_b117))
frequencies_question <- t(frequencies_questions)
frequencies_question <- t(frequencies_question)
mutations <- colnames((frequencies_question))
frequencies_question <- t(frequencies_question)
View(mutation_frequencies())
View(mutations)
mutations <- as.data.frame(mutations)
View(mutations)
frequencies_b117 <- cbind(mutations, frequencies_question)
View(frequencies_b117)
View(frequencies_question)
View(mutations)
View(frequencies_b117)
relevant_mutations <- filter5percent(frequencies_b117, nrow(df_b117))
View(relevant_mutations)
binmatrix_b117_0k_100k <- build_matrix(df_b117, relevant_mutations)
binmatrix_b117_0k_100k <- build_matrix(df_b117[1:100000], relevant_mutations)
binmatrix_b117_0k_100k <- build_matrix(df_b117[1:100000,], relevant_mutations)
binmatrix_b117_100k_200K <- build_matrix(df_b117[100001:200000,], relevant_mutations)
binmatrix_b117_200K_300k <- build_matrix(df_b117[200001:300000,], relevant_mutations)
binmatrix_b117_300k_400k <- build_matrix(df_b117[300001:400000,], relevant_mutations)
binmatrix_b117_300k_400k <- build_matrix(df_b117[300001:400000,], relevant_mutations)
View(binmatrix_b117_300k_400k)
binmatrix_b117_300k_400k <- build_matrix(df_b117[300001:400000,], relevant_mutations)
View(binmatrix_b117_200K_300k)
View(binmatrix_b117_100k_200K)
View(binmatrix_b117_0k_100k)
testmatrix <- build_matrix(df_b117[1:100,], relevant_mutations)
View(testmatrix)
View(relevant_mutations)
# Function that builds the binary matrix of mutations
# column names
# [lineage, country, date, mutation1, mutation2, ..., mutationN]
# Input:
#   dfcovid <- dataframe as presented in the original metadata_filtrato.csv dataset
#              (minus the "host" column, which is assumed to be "Homo sapiens").
#   important_mutations <- the set of mutations deemed relevant for our analysis, that is the mutations
#                          that appear less than 95% and more than 5% of the time.
build_matrix <- function(dfcovid, important_mutations) {
# Initial declaration of the matrix, empty matrix
finalmatrix <- as.data.frame(matrix(nrow=0, ncol = (3 + nrow(important_mutations))))
# Outer for that scans the dataframe one row at a time
for(i in 1:nrow(dfcovid)) {
# the "toadd" dataframe is a one row dataframe containing the row to be added to the matrix
# we fill it with the lineage, country, date + a number of columns equal to that of the
# relevant mutations
toadd <- as.data.frame(matrix(nrow=1, ncol = (3 + nrow(important_mutations))))
toadd[1,1] <- dfcovid[i,]$pango_lineage;
toadd[1,2] <- dfcovid[i,]$country
toadd[1,3] <- dfcovid[i,]$date
# We initialize the 4th column up to nrow(important_mutations) with zeroes, remember
# that these are binary variables!
toadd[1,4:ncol(toadd)] <- t(as.data.frame(integer(nrow(important_mutations))))
# The aaSubstitutions column is split by "," and converted into a dataframe to be scanned
# for example:
#   N:G204R,ORF1a:Q3966R,S:K1191N (one row)
#   becomes this:
#     - N:G204R
#     - ORF1a:Q3966R
#     - S:K1191N
aamutations <- as.data.frame(strsplit(as.character(dfcovid[i,9]), ","))
# Now we scan the mutations
for(j in 1:nrow(aamutations)) {
# We search for the index of the current mutation in the important_mutations row
# If we don't find it then it means that the mutations is not relevant and we don't consider it
# this also means that match() will return a NA (absence of a value)
mutation_i <- match(aamutations[j,1], important_mutations[,1])
if(!is.na(mutation_i)) {
# If we find the mutation then we mark it with a 1 (the mutation occurred in this sample)
toadd[1, 3 + mutation_i] <- 1
}
}
# We add the "toadd" row to the matrix (merging the two with rbind())
finalmatrix <- rbind(finalmatrix, toadd[1,])
}
# We rename the column names
colnames(finalmatrix) <- c("lineage", "country", "date", t(important_mutations[,1]))
return(finalmatrix)
}
testmatrix <- build_matrix(df_b117[1:100,], relevant_mutations)
View(testmatrix)
View(testmatrix)
View(relevant_mutations)
# Function that builds the binary matrix of mutations
# column names
# [lineage, country, date, mutation1, mutation2, ..., mutationN]
# Input:
#   dfcovid <- dataframe as presented in the original metadata_filtrato.csv dataset
#              (minus the "host" column, which is assumed to be "Homo sapiens").
#   important_mutations <- the set of mutations deemed relevant for our analysis, that is the mutations
#                          that appear less than 95% and more than 5% of the time.
build_matrix <- function(dfcovid, important_mutations) {
# Initial declaration of the matrix, empty matrix
finalmatrix <- as.data.frame(matrix(nrow=0, ncol = (3 + nrow(important_mutations))))
# Outer for that scans the dataframe one row at a time
for(i in 1:nrow(dfcovid)) {
# the "toadd" dataframe is a one row dataframe containing the row to be added to the matrix
# we fill it with the lineage, country, date + a number of columns equal to that of the
# relevant mutations
toadd <- as.data.frame(matrix(nrow=1, ncol = (3 + nrow(important_mutations))))
toadd[1,1] <- dfcovid[i,]$pango_lineage;
toadd[1,2] <- dfcovid[i,]$country
toadd[1,3] <- dfcovid[i,]$date
# We initialize the 4th column up to nrow(important_mutations) with zeroes, remember
# that these are binary variables!
toadd[1,4:ncol(toadd)] <- t(as.data.frame(integer(nrow(important_mutations))))
# The aaSubstitutions column is split by "," and converted into a dataframe to be scanned
# for example:
#   N:G204R,ORF1a:Q3966R,S:K1191N (one row)
#   becomes this:
#     - N:G204R
#     - ORF1a:Q3966R
#     - S:K1191N
aamutations <- as.data.frame(strsplit(as.character(dfcovid[i,9]), ","))
# Now we scan the mutations
for(j in 1:nrow(aamutations)) {
print(aamutations[j,1])
print(important_mutations[,1])
# We search for the index of the current mutation in the important_mutations row
# If we don't find it then it means that the mutations is not relevant and we don't consider it
# this also means that match() will return a NA (absence of a value)
mutation_i <- match(aamutations[j,1], important_mutations[,1])
print(mutation_i)
if(!is.na(mutation_i)) {
# If we find the mutation then we mark it with a 1 (the mutation occurred in this sample)
toadd[1, 3 + mutation_i] <- 1
}
}
# We add the "toadd" row to the matrix (merging the two with rbind())
finalmatrix <- rbind(finalmatrix, toadd[1,])
}
# We rename the column names
colnames(finalmatrix) <- c("lineage", "country", "date", t(important_mutations[,1]))
return(finalmatrix)
}
testmatrix <- build_matrix(df_b117[1:100,], relevant_mutations)
View(df_b117)
View(relevant_mutations)
for(i in 1:nrow(relevant_mutations)) {
relevant_mutations[i,1] <- gsub(".",":",relevant_mutations[i,1])
}
View(mutations)
gsub(".",":","hi.dude")
sub(".",":","hi.dude")
install.packages("stringr")
library("stringr")
str_replace_all("hi.dude",".",":")
str_replace_all("hi.dude","e","E")
str_replace_all("hi.dude","\.","\:")
str_replace_all("hi.dude","\\.",":")
frequencies_question
View(frequencies_b117)
relevant_mutations <- filter5percent(frequencies_b117)
relevant_mutations <- filter5percent(frequencies_b117, nrow(df_b117))
View(relevant_mutations)
for(i in 1:nrow(relevant_mutations)) {
relevant_mutations[i,1] <- gsub("\\.",":",relevant_mutations[i,1])
}
testmatrix <- build_matrix(df_b117[1:100,], relevant_mutations)
View(testmatrix)
binmatrix_b117_0k_100k <- build_matrix(df_b117[1:100000,], relevant_mutations)
# Function that builds the binary matrix of mutations
# column names
# [lineage, country, date, mutation1, mutation2, ..., mutationN]
# Input:
#   dfcovid <- dataframe as presented in the original metadata_filtrato.csv dataset
#              (minus the "host" column, which is assumed to be "Homo sapiens").
#   important_mutations <- the set of mutations deemed relevant for our analysis, that is the mutations
#                          that appear less than 95% and more than 5% of the time.
build_matrix <- function(dfcovid, important_mutations) {
# Initial declaration of the matrix, empty matrix
finalmatrix <- as.data.frame(matrix(nrow=0, ncol = (3 + nrow(important_mutations))))
# Outer for that scans the dataframe one row at a time
for(i in 1:nrow(dfcovid)) {
# the "toadd" dataframe is a one row dataframe containing the row to be added to the matrix
# we fill it with the lineage, country, date + a number of columns equal to that of the
# relevant mutations
toadd <- as.data.frame(matrix(nrow=1, ncol = (3 + nrow(important_mutations))))
toadd[1,1] <- dfcovid[i,]$pango_lineage;
toadd[1,2] <- dfcovid[i,]$country
toadd[1,3] <- dfcovid[i,]$date
# We initialize the 4th column up to nrow(important_mutations) with zeroes, remember
# that these are binary variables!
toadd[1,4:ncol(toadd)] <- t(as.data.frame(integer(nrow(important_mutations))))
# The aaSubstitutions column is split by "," and converted into a dataframe to be scanned
# for example:
#   N:G204R,ORF1a:Q3966R,S:K1191N (one row)
#   becomes this:
#     - N:G204R
#     - ORF1a:Q3966R
#     - S:K1191N
aamutations <- as.data.frame(strsplit(as.character(dfcovid[i,9]), ","))
# Now we scan the mutations
for(j in 1:nrow(aamutations)) {
# We search for the index of the current mutation in the important_mutations row
# If we don't find it then it means that the mutations is not relevant and we don't consider it
# this also means that match() will return a NA (absence of a value)
mutation_i <- match(aamutations[j,1], important_mutations[,1])
if(!is.na(mutation_i)) {
# If we find the mutation then we mark it with a 1 (the mutation occurred in this sample)
toadd[1, 3 + mutation_i] <- 1
}
}
# We add the "toadd" row to the matrix (merging the two with rbind())
finalmatrix <- rbind(finalmatrix, toadd[1,])
}
# We rename the column names
colnames(finalmatrix) <- c("lineage", "country", "date", t(important_mutations[,1]))
return(finalmatrix)
}
binmatrix_b117_0k_100k <- build_matrix(df_b117[1:100000,], relevant_mutations)
View(binmatrix_b117_100k_200K)
remove(binmatrix_b117_0k_100k,binmatrix_b117_100k_200K,binmatrix_b117_200K_300k,binmatrix_b117_300k_400k)
remove(testmatrix)
binmatrix_b117_0k_100k <- build_matrix(df_b117[1:100000,], relevant_mutations)
View(binmatrix_b117_0k_100k)
binmatrix_b117_100k_200k <- build_matrix(df_b117[100001:200000,], relevant_mutations)
binmatrix_b117_200k_300k <- build_matrix(df_b117[200001:300001,], relevant_mutations)
View(binmatrix_b117_200k_300k)
binmatrix_b117_200k_300k <- binmatrix_b117_200k_300k[-300001,]
binmatrix_b117_200k_300k <- binmatrix_b117_200k_300k[-300001,]
binmatrix_b117_200k_300k <- binmatrix_b117_200k_300k[-100001,]
binmatrix_b117_300k_400k <- buildmatrix(df_b117[300001:400000,],relevant_mutations)
binmatrix_b117_300k_400k <- build_matrix(df_b117[300001:400000,],relevant_mutations)
binmatrix_b117_400k_473k <- build_matrix(df_b117[400000:nrow(df_b117),],relevant_mutations)
binmatrix_b117_400k_473k <- build_matrix(df_b117[400001:nrow(df_b117),],relevant_mutations)
binmatrix_b117 <- rbind(binmatrix_b117_0k_100k, binmatrix_b117_100k_200k, binmatrix_b117_200k_300k, binmatrix_b117_300k_400k, binmatrix_b117_400k_473k)
write.csv(data.frame(binmatrix_b117), file="binmatrix_b117.csv", row.names = FALSE)
getwd()
write.csv(data.frame(frequencies_b117),file="frequencies_b117.csv",row.names=FALSE)
View(frequencies_b117)
View(binmatrix_b117)
